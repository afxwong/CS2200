1.1) When we execute something like JALR, we are always jumping elsewhere with the intention of coming back to the current activation stack frame. In order to maintain a record of where you came from when you jumped, we save $ra on the stack and retrieve it once we are done with the activation stack frame we jumped to. Without it, the $ra could be overwritten making it impossible to return
1.2) The benefit of splitting up the chore of restoring/saving registers between the caller and callee is that it cuts out unnecessary saving of registers to the stack. Because the callee and caller both individually know what registers they need in any subroutine call. This way, they save what they need to save instead of aimlessly saving every register to the stack even if they aren't needed or used
1.3) The callee saves the previous frame pointer. The benefit of having a frame pointer is that it exists as a static location within the stack. Other elements within the current activation record are at constant locations relative to the frame pointer. This means we always know where certain things are in the current subroutine stack.

2.1)
add $t0, $t0, $t1
lw $t0, (0)$t0
jalr $t0, $ra
2.2) This could be replicated using a series of BEQ instructions. In the best cases, this method is more time-efficient because each BEQ individually requires less clock cycles compared to the combination of instructions defined in 2.1. However, in the worst-cases, it becomes less time-efficient because there can be up to k or these BEQ instructions. If the case we are finding is k, we will run through k BEQ instructions. This compared to the constant number of clock cycles required to do the instructions defined in 2.1 means that the more cases we have, the less time-efficient conditional branching becomes.

3)
multiadd0: DrREG, LdA, RegSel=01
multiadd1: DrREG, LdB, RegSel=10
multiadd2: DrALU, func=100, LdA
multiadd3: DrREG, LdB, RegSel=00
multiadd4: DrALU, WrREG, RegSel=00, func=000

4.1) Yes. Because of the previous fetch microstates required to get to halt, we know that the register A holds the PC address of the halt instruction. The next state defined in halt is to go to br2. This places the offset value in the halt instruction into register B. We know this value to be 0. The next microstate is br3, which pushes A+B into PC, which in this case is PC+0. This means that when we go to fetch again, we are fetching the un-incremented PC pointing to the address of halt, creating an infinite loop of halts and stopping the program.
4.2) It may not. This solely depends on the value help in the register B. As previously mentioned, when we get to the microstate br3, fetch has placed the PC/address of halt into the register A. In br3 we add registers A and B and place it into the PC register. Because we do not know if any other instruction has interacted with register B, we don't know what the value there is. If it happens to be 0, we will again loop like we want. If it is not then it will not achieve the same semantics as halt.

5.1) The timer is asserted first
5.2) The second device is asserted once the previous interrupt and its subsequent instructions are completed

6) An interrupt that occurs in between enable interrupt and jump would trash the current value in $k0 when you jump to another interrupt. This means we lose our "path" back to a prior interrupt.

7.1) .1%
7.2) 2.57%

8) 17.65%

9) 5 times faster